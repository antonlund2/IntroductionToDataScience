system("defaults write org.R-project.R force.LANG en_US.UTF-8")
rm(list = ls())
setwd("~/git/IntroductionToDataScience/assignment5")
D = read.csv(file="seaflow_21min.csv")
#Q1 - Q2
summary(D$pop)
summary(D$fsc_small)
#Create training and testing data samples
n = floor(length(D$time)/2)
index <- 1:nrow(D)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- D[trainindex, ]
testset <- D[-trainindex, ]
#Q3
summary(trainset$time)
install.packages("ggplot2")
ggplot(g)
ggplot2(fer)
library(ggplot2)
ggplot(D$pe,D$chl_small,color = D$pop, xlab = "fluerescense", ylab = "small wavelength" )
qplot(D$pe,D$chl_small,color = D$pop, xlab = "fluerescense", ylab = "small wavelength" )
View(D)
View(D)
install.packages("rpart")
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method = "class", data = trainset)
library(rpart)
model <- rpart(fol, method = "class", data = trainset)
print(model)
?predicr
?predict
prediction <- predict(model)
View(prediction)
View(prediction)
prediction <- predict(model, testset)
View(prediction)
prediction <- predict(model, testset, type = "class")
prediction
prediction <- predict(model, testset, type = "vector")
prediction
prediction <- predict(model, testset, type = "matrix")
View(prediction)
View(prediction)
prediction <- predict(model, testset, type = "class")
View(testset)
prediction
score = testset$pop == prediction
score <- testset$pop == prediction
correct <- testset$pop == prediction
score = sum(correct)/rownum(correct)
score = sum(correct)/nrow(correct)
nrow(correct)
sum(correct)
score = sum(correct)/length(correct)
score = sum(correct)/length(correct)
library(randomforest)
install.packages(randomforest)
install.packages("randomforest")
y
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
library(randomforest)
library(randomForest)
forestmodel <- randomForest(fol, data=trainingdata)
forestmodel <- randomForest(fol, data=trainset)
print(forestmodel)
print(forestmodel)
forestprediction <- predict(forestmodel, testset, type = "class")
forestcorrect <- testset$pop == forestprediction
forest
forestscore = sum(correct)/length(correct)
forestscore = sum(forestcorrect)/length(forestcorrect)
impoartance(forestmodel)
importance(forestmodel)
install.packages("e1071")
library(e1071)
model <- svm(fol, data=trainingdata)
svmmodel <- svm(fol, data=trainingdata)
svmmodel <- svm(fol, data=trainset)
svmprediction <- predict(svmmodel, testset, type = "class")
svmcorrect <- testset$pop == svmprediction
svmscore = sum(svmcorrect)/length(svmcorrect)
install.packages("confusionMatrix")
binarytable = table(testset$pop,prediction)
binarytable
foresttable = table(testset$pop,forestprediction)
svmtable = table(testset$pop,svmprediction)
svmtable
foresttable
ggplot(data=D)
ggplot(data=D$time)
qplot(rating, data=D, geom="histogram")
qplot(time), data=D, geom="histogram")
qplot(time, data=D, geom="histogram")
View(D)
View(D)
View(D)
View(D)
qplot(pe, data=D, geom="histogram")
qplot(fsc_perp, data=D, geom="histogram")
qplot(fsc_perp, data=D, geom="histogram",binwidth = 1)
newtest <- subset(trainset, ! filed_id == 208)
newtest <- subset(trainset, ! file_id == 208)
newtrain <- subset(testset, ! file_id == 208)
newsvmmodel <- svm(fol, data=newtrain)
newsvmprediction <- predict(newsvmmodel, newtest, type = "class")
newsvmcorrect <- testset$pop == svmprediction
newsvmscore = sum(newsvmcorrect)/length(newsvmcorrect)
preddiff = newsvmscore - svmscore
newsvmcorrect <- newtest$pop == newsvmprediction
newsvmscore = sum(newsvmcorrect)/length(newsvmcorrect)
preddiff = newsvmscore - svmscore
summary(D$pop)
summary(D$fsc_small)
summary(trainset$time)
qplot(D$pe,D$chl_small,color = D$pop, xlab = "fluerescense", ylab = "small wavelength")
newD <- subset(D, ! file_id == 208)
newindex <- 1:nrow(newD)
newtrainindex <- sample(newindex, trunc(length(newindex)/2))
newtrain <- D[newtrainindex, ]
newtest <- D[-newtrainindex, ]
newsvmmodel <- svm(fol, data=newtrain)
newsvmprediction <- predict(newsvmmodel, newtest, type = "class")
newsvmcorrect <- newtest$pop == newsvmprediction
newsvmscore = sum(newsvmcorrect)/length(newsvmcorrect)
preddiff = newsvmscore - svmscore
newD <- subset(D, ! file_id == 208)
newindex <- 1:nrow(newD)
newtrainindex <- sample(newindex, trunc(length(newindex)/2))
newtrain <- newD[newtrainindex, ]
newtest <- newD[-newtrainindex, ]
newsvmmodel <- svm(fol, data=newtrain)
newsvmprediction <- predict(newsvmmodel, newtest, type = "class")
newsvmcorrect <- newtest$pop == newsvmprediction
newsvmscore = sum(newsvmcorrect)/length(newsvmcorrect)
preddiff = newsvmscore - svmscore
qplot(fsc_perp, data=D, geom="histogram",binwidth = 100)
names(D)
qplot(chl_small, data=D, geom="histogram",binwidth = 100)
qplot(chl_big, data=D, geom="histogram",binwidth = 100)
qplot(pe, data=D, geom="histogram",binwidth = 100)
qplot(fsc_small, data=D, geom="histogram",binwidth = 100)
qplot(fsc_small, data=D, geom="histogram",binwidth = 200)
qplot(fsc_perp, data=D, geom="histogram",binwidth = 200)
qplot(pe, data=D, geom="histogram",binwidth = 200)
qplot(chl_big, data=D, geom="histogram",binwidth = 200)
qplot(fsc_big, data=D, geom="histogram",binwidth = 200)
View(D)
View(D)
